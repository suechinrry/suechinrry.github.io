<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on SueChinrry</title>
        <link>https://suechinrry.github.io/tags/git/</link>
        <description>Recent content in Git on SueChinrry</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>SueChinrry</copyright>
        <lastBuildDate>Thu, 27 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://suechinrry.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>git</title>
        <link>https://suechinrry.github.io/p/git/</link>
        <pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://suechinrry.github.io/p/git/</guid>
        <description>&lt;h2 id=&#34;创建仓库&#34;&gt;创建仓库
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用git init&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;会在当前目录下创建一个 &lt;code&gt;.git&lt;/code&gt; 子目录，里面包含了 Git 所需的所有文件和数据结构，用于跟踪版本历史。&lt;/p&gt;
&lt;p&gt;此时，你可以开始在这个目录下使用 Git 来管理文件，进行版本控制等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后面跟名称会在当前目录下新建名称为已给名称的目录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用git clone&lt;/p&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;p&gt;点击 &lt;strong&gt;Code&lt;/strong&gt; 按钮，你会看到一个 URL 地址框。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTPS URL&lt;/strong&gt;：如果你使用 HTTPS 协议，复制 &lt;code&gt;https://github.com/用户名/仓库名.git&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH URL&lt;/strong&gt;：如果你使用 SSH 协议，复制 &lt;code&gt;git@github.com:用户名/仓库名.git&lt;/code&gt;（前提是你已经配置了 SSH 密钥）。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/用户名/仓库名.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本地数据管理&#34;&gt;本地数据管理
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;工作区&lt;/li&gt;
&lt;li&gt;暂存区&lt;/li&gt;
&lt;li&gt;本地仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;将文件添加到仓库&#34;&gt;将文件添加到仓库
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;git status &lt;strong&gt;查看仓库状态&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;追踪了并且提交到本地仓库的、且未作修改的文件&lt;/strong&gt;，在执行 &lt;code&gt;git status&lt;/code&gt; 时 &lt;strong&gt;不会显示&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这是因为 &lt;code&gt;git status&lt;/code&gt; 只会显示以下几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;修改了的文件&lt;/strong&gt;（即已经追踪的文件有更改，但尚未提交到仓库）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新增文件&lt;/strong&gt;（尚未被 Git 跟踪的新文件）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;已暂存的文件&lt;/strong&gt;（已用 &lt;code&gt;git add&lt;/code&gt; 添加到暂存区，准备提交的文件）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与远程仓库的差异&lt;/strong&gt;（如有未推送的提交或与远程分支不同的状态）。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;git add &lt;strong&gt;将文件添加到暂存区&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以使用通配符批量添加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还可以使用&lt;code&gt;git add .&lt;/code&gt; 添加当前文件夹下的所有文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git rm --cached &amp;lt;文件名&amp;gt;&lt;/code&gt; &lt;strong&gt;从暂存区移除&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git ls-files &lt;strong&gt;查看暂存区里的内容&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git commit &lt;strong&gt;提交暂存区里的文件到本地仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正确的使用方式（包含提交信息）&lt;code&gt; git commit -m &amp;quot;修复登录页面的样式问题&amp;quot;  ``-m&lt;/code&gt; ，选项用于为提交添加一条提交信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提交信息为空，Git 会报错&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git log &lt;strong&gt;查看提交记录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后面可以跟选项，展示提交记录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;回退版本&#34;&gt;回退版本
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;默认为mixed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;补充：&lt;strong&gt;提交后，暂存区的内容不会被删除，暂存区依然可以用来存放对文件的新修改，直到再次提交&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset --XX 提交id（版本id）&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset --soft&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;回退到某个版本，但是&lt;strong&gt;保留工作区和暂存区的所有内容&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset --hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;回退到某个版本，但是&lt;strong&gt;丢弃工作区和暂存区的所有内容&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset --mixed&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;回退到某个版本，但是&lt;strong&gt;保留工作区的内容&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查看差异&#34;&gt;查看差异
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-查看工作目录和暂存区之间的差异&#34;&gt;1. &lt;strong&gt;查看工作目录和暂存区之间的差异&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt; 默认情况下，比较工作目录和暂存区的差异，也就是你已经修改但尚未使用 &lt;code&gt;git add&lt;/code&gt; 暂存的文件内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;它会显示自上次提交以来，工作目录中尚未暂存的更改。&lt;/p&gt;
&lt;h4 id=&#34;2-查看暂存区和上次提交之间的差异&#34;&gt;2. &lt;strong&gt;查看暂存区和上次提交之间的差异&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;如果你已经通过 &lt;code&gt;git add&lt;/code&gt; 将更改暂存，但还没有提交，可以使用以下命令查看暂存区和最后一次提交之间的差异：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff --cached
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个命令会显示暂存区的内容和上一次提交的内容之间的差异。&lt;/p&gt;
&lt;h4 id=&#34;3-查看工作目录和上次提交之间的差异&#34;&gt;3. &lt;strong&gt;查看工作目录和上次提交之间的差异&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;HEAD是分支的最新提交节点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果你想查看工作目录和最后一次提交之间的所有差异（包括已经暂存和未暂存的更改），可以使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff HEAD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;HEAD&lt;/code&gt; 表示当前分支的最新提交。&lt;/p&gt;
&lt;h4 id=&#34;4-查看某个文件的差异&#34;&gt;4. &lt;strong&gt;查看某个文件的差异&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;你也可以指定某个文件来查看它的差异。例如，要查看 &lt;code&gt;file.txt&lt;/code&gt; 的差异，可以使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样只会显示 &lt;code&gt;file.txt&lt;/code&gt; 文件的更改。&lt;/p&gt;
&lt;h4 id=&#34;5-查看两个分支之间的差异&#34;&gt;5. &lt;strong&gt;查看两个分支之间的差异&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;如果你想查看两个分支之间的差异，可以指定两个分支名。例如，查看 &lt;code&gt;main&lt;/code&gt; 和 &lt;code&gt;feature&lt;/code&gt; 分支之间的差异：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff main..feature
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这会显示 &lt;code&gt;feature&lt;/code&gt; 分支相对于 &lt;code&gt;main&lt;/code&gt; 分支的差异。&lt;/p&gt;
&lt;h4 id=&#34;6-查看两个提交之间的差异&#34;&gt;6. &lt;strong&gt;查看两个提交之间的差异&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;如果你想查看两个特定提交之间的差异，可以使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff commit1 commit2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;commit1&lt;/code&gt; 和 &lt;code&gt;commit2&lt;/code&gt; 是提交的 SHA-1 哈希值、分支名或者引用（例如 &lt;code&gt;HEAD~1&lt;/code&gt;）。&lt;/p&gt;
&lt;h4 id=&#34;7-查看某个文件在两个提交之间的差异&#34;&gt;7. &lt;strong&gt;查看某个文件在两个提交之间的差异&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;如果你只对某个文件在两个提交之间的差异感兴趣，可以使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff commit1 commit2 -- file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;8-查看修改的统计信息&#34;&gt;8. &lt;strong&gt;查看修改的统计信息&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;如果你只想查看文件修改的统计信息，而不显示具体的修改内容，可以加上 &lt;code&gt;--stat&lt;/code&gt; 选项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff --stat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除文件&#34;&gt;删除文件
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git rm 文件名&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;--cached&lt;/code&gt;&lt;/strong&gt;
只从 Git 跟踪中移除文件，保留文件在本地磁盘上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-r&lt;/code&gt; 或 &lt;code&gt;--recursive&lt;/code&gt;&lt;/strong&gt;
递归删除目录及其内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-f&lt;/code&gt; 或 &lt;code&gt;--force&lt;/code&gt;&lt;/strong&gt;
强制删除文件，即使文件是只读的或有未提交的修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-n&lt;/code&gt; 或 &lt;code&gt;--dry-run&lt;/code&gt;&lt;/strong&gt;
模拟删除操作，显示将被删除的文件，但不实际删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;删除工作区和暂存区，但是版本库中还存在，所以还要记得提交&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;gitignore文件&#34;&gt;.gitignore文件
&lt;/h2&gt;&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;生效前提：要忽略的文件不能是已经添加到仓库里的文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;文件格式&#34;&gt;文件格式
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt; 文件的格式非常简单，每行代表一个模式，用来匹配需要忽略的文件或目录。以下是 &lt;code&gt;.gitignore&lt;/code&gt; 文件的一些常见规则：&lt;/p&gt;
&lt;h3 id=&#34;常见规则和语法&#34;&gt;常见规则和语法
&lt;/h3&gt;&lt;p&gt;使用标准的Blob模式匹配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\*&lt;/code&gt;&lt;/strong&gt;：匹配零个或多个字符。&lt;/p&gt;
&lt;p&gt;例子：&lt;code&gt;*.txt&lt;/code&gt; 匹配所有 &lt;code&gt;.txt&lt;/code&gt; 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;?&lt;/code&gt;&lt;/strong&gt;：匹配单个字符。&lt;/p&gt;
&lt;p&gt;例子：&lt;code&gt;file?.txt&lt;/code&gt; 匹配 &lt;code&gt;file1.txt&lt;/code&gt;, &lt;code&gt;fileA.txt&lt;/code&gt; 等，但不匹配 &lt;code&gt;file10.txt&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/strong&gt;：匹配指定范围内的单个字符。&lt;/p&gt;
&lt;p&gt;例子：&lt;code&gt;file[1-3].txt&lt;/code&gt; 匹配 &lt;code&gt;file1.txt&lt;/code&gt;, &lt;code&gt;file2.txt&lt;/code&gt;, &lt;code&gt;file3.txt&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\**&lt;/code&gt;&lt;/strong&gt;（用于递归匹配目录）：&lt;/p&gt;
&lt;p&gt;例子：&lt;code&gt;**/*.txt&lt;/code&gt; 匹配所有子目录中的 &lt;code&gt;.txt&lt;/code&gt; 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;忽略特定文件或目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你可以指定要忽略的文件或目录的路径。例如：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;忽略文件夹必须要带/&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;example.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;logs/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;build/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上面表示 &lt;code&gt;example.txt&lt;/code&gt; 文件，&lt;code&gt;logs&lt;/code&gt; 目录和 &lt;code&gt;build&lt;/code&gt; 目录会被 Git 忽略。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;忽略特定扩展名的文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用通配符 &lt;code&gt;*&lt;/code&gt; 来忽略所有符合模式的文件。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*.tmp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这样会忽略所有 &lt;code&gt;.log&lt;/code&gt; 和 &lt;code&gt;.tmp&lt;/code&gt; 后缀的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;忽略某个文件夹中的某种类型文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果你只想忽略特定文件夹中的文件，可以指定路径。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;logs/*.log
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这表示只忽略 &lt;code&gt;logs&lt;/code&gt; 文件夹中的 &lt;code&gt;.log&lt;/code&gt; 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;忽略目录中的所有文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;要忽略某个目录中的所有文件，使用 &lt;code&gt;*&lt;/code&gt; 通配符。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;build/*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这会忽略 &lt;code&gt;build&lt;/code&gt; 目录中的所有文件，但 &lt;code&gt;build&lt;/code&gt; 目录本身不会被忽略。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;取消对已忽略文件的忽略&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;.gitignore&lt;/code&gt; 中的某个文件之前被忽略，但你后来希望 Git 追踪它，可以使用 &lt;code&gt;!&lt;/code&gt; 取消忽略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;!important.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上面的规则表示取消对 &lt;code&gt;important.txt&lt;/code&gt; 文件的忽略，Git 会开始追踪它。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注释&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你可以在&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.gitignore
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;文件中添加注释，注释以 # 开头。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 忽略所有的 .log 文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*.log
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;远程仓库&#34;&gt;远程仓库
&lt;/h2&gt;&lt;h3 id=&#34;使用ssh&#34;&gt;使用ssh
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;配置ssh密钥&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
